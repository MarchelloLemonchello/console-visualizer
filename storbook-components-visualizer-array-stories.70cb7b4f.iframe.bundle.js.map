{"version":3,"file":"storbook-components-visualizer-array-stories.70cb7b4f.iframe.bundle.js","mappings":";;AAQA;;ACAA;;;ACDA;;AAGA;;;ACNA;;;;;ACuBA;AAGA","sources":["webpack://console-visualizer/./src/components/number/index.tsx","webpack://console-visualizer/./src/components/string/index.tsx","webpack://console-visualizer/./src/components/styleComponents/index.tsx","webpack://console-visualizer/./src/components/object/index.tsx","webpack://console-visualizer/./src/Visualizer.tsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport {TTypeViewer} from \"../../model/propsTypes\";\n\n const NumberSpan = styled.span`\n     color: #8ed38e;\n `\n\nexport const NumberComponent: TTypeViewer = ({ data }) => {\n  if (typeof data !== 'number') {\n    throw new TypeError('ObjectViewer: data has invalid type');\n  }\n\n  return (\n    <NumberSpan>\n      {data}\n    </NumberSpan>\n  );\n};","import React from 'react';\nimport styled from \"styled-components\";\nimport {TTypeViewer} from \"../../model/propsTypes\";\n\nconst StringSpan = styled.span`\n    color: #bfbfbf;\n`\n\nexport const StringComponent: TTypeViewer = ({ data }) => {\n  if (typeof data !== 'string') {\n    throw new TypeError('ObjectViewer: data has invalid type');\n  }\n\n  return (\n    <StringSpan>\n      &#34;{data}&#34;\n    </StringSpan>\n  );\n};","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n    padding: 0 0 0 12px;\n    margin: 0;\n`\n\nexport const TypeText = styled.span`\n    color: #757575;\n`\nexport const ButtonExpand = styled.span`\n    padding: 2px 4px;\n    cursor: pointer;\n`\n\n","import React from 'react';\nimport { TTypeViewer } from \"../../model/propsTypes\";\nimport { ButtonExpand } from \"../styleComponents\";\n\nexport const ObjectComponent: TTypeViewer = ({ data , renderNestedData}) => {\n  if (!data || typeof data !== 'object' || Array.isArray(data)) {\n    throw new TypeError('ObjectComponent: data has invalid type');\n  }\n  const [ toggle, setToggle ] = React.useState(false);\n  const dataArray = Object.entries(data);\n  return (\n    <>\n      <ButtonExpand onClick={() => setToggle(prev => !prev)}>\n        {\n          toggle\n            ? \"⏷\"\n            : \"⏵\"\n        }\n      </ButtonExpand>\n      {\"{\"}\n      {\n        toggle\n          ?\n          dataArray.map((dataElement, i) =>\n            renderNestedData({name: dataElement[0], data: dataElement[1], post: dataArray.length - 1 !== i ? \",\" : \"\"})\n          )\n          :\n          \"...\"\n      }\n\n      {\"}\"}\n    </>\n  )\n};\n","import React, {FC} from \"react\";\nimport {TAny} from \"./model/propsTypes\";\nimport {Analyzer} from \"./components/analyzer\";\nimport styled from \"styled-components\";\n\ntype TVariant = 'log' | 'info' | 'warn' | 'error';\n\nexport interface VisualizerProps {\n  data: TAny\n  name?: string\n  variant?: TVariant\n}\n\nconst borderColorVariants = {\n  log: '#2e2e2e',\n  info: '#00b5bf',\n  warn: '#f76b00',\n  error: '#ec0000',\n} as Record<TVariant, string>\n\nexport const Visualizer: FC<VisualizerProps> = ({data, name, variant}) => {\n\n  const ConsoleState = styled.div`\n      padding: 12px;\n      color: #f3fdeb;\n      background: #2e2e2e;\n      border-radius: 6px;\n      border: 2px solid ${variant ? borderColorVariants[variant] : '#2e2e2e'};\n  `\n\n  return (\n    <ConsoleState>\n       <Analyzer data={data} pre={name ? name + \" = \": ''} post=\" ;\"/>\n    </ConsoleState>\n  );\n};\n\n"],"names":[],"sourceRoot":""}